# Generated by Django 5.1.4 on 2025-04-07 21:24

import django.core.validators
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Casing",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Price in BDT",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "regular_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Regular price in BDT",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "brand",
                    models.CharField(
                        blank=True,
                        help_text="Brand of the product",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "model",
                    models.CharField(
                        blank=True,
                        help_text="Model name of the product",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "warranty",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("1 Year", "1 Year"),
                            ("2 Years", "2 Years"),
                            ("3 Years", "3 Years"),
                            ("4 Years", "4 Years"),
                            ("5 Years", "5 Years"),
                            ("10 Years", "10 Years"),
                            ("Lifetime Warranty", "Lifetime Warranty"),
                        ],
                        help_text="Warranty duration",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the product"
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("CPU", "CPU"),
                            ("Cooler", "Cooler"),
                            ("Motherboard", "Motherboard"),
                            ("RAM", "RAM"),
                            ("SSD", "SSD"),
                            ("HDD", "HDD"),
                            ("GPU", "GPU"),
                            ("Power Supply", "Power Supply"),
                            ("Casing", "Casing"),
                            ("Monitor", "Monitor"),
                            ("Keyboard", "Keyboard"),
                            ("Mouse", "Mouse"),
                            ("Headphone", "Headphone"),
                        ],
                        help_text="Category of the product",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "tdp",
                    models.IntegerField(
                        blank=True,
                        help_text="Thermal Design Power (TDP) in watts",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "is_featured",
                    models.BooleanField(default=False, help_text="Featured product"),
                ),
                (
                    "stock",
                    models.PositiveIntegerField(
                        default=0, help_text="Available stock quantity"
                    ),
                ),
                (
                    "is_available",
                    models.BooleanField(
                        default=True, help_text="Product availability status"
                    ),
                ),
                (
                    "image1",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Casing (main)",
                        null=True,
                        upload_to="casing_images/",
                    ),
                ),
                (
                    "image2",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Casing (optional)",
                        null=True,
                        upload_to="casing_images/",
                    ),
                ),
                (
                    "image3",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Casing (optional)",
                        null=True,
                        upload_to="casing_images/",
                    ),
                ),
                (
                    "image4",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Casing (optional)",
                        null=True,
                        upload_to="casing_images/",
                    ),
                ),
                (
                    "image5",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Casing (optional)",
                        null=True,
                        upload_to="casing_images/",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Full Tower", "Full Tower"),
                            ("Mid Tower", "Mid Tower"),
                            ("Mini Tower", "Mini Tower"),
                            ("Micro Tower", "Micro Tower"),
                            ("Ultra Slim", "Ultra Slim"),
                        ],
                        help_text="Type of case",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "form_factor",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ATX", "ATX"),
                            ("Micro-ATX", "Micro-ATX"),
                            ("Mini-ITX", "Mini-ITX"),
                            ("E-ATX", "E-ATX"),
                        ],
                        help_text="Form factor",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "side_panel",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Tempered Glass", "Tempered Glass"),
                            ("Solid", "Solid"),
                            ("Plastic", "Plastic"),
                            ("Mesh", "Mesh"),
                        ],
                        help_text="Side panel",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "ssd_bays",
                    models.IntegerField(
                        blank=True, help_text="Number of SSD bays", null=True
                    ),
                ),
                (
                    "hdd_bays",
                    models.IntegerField(
                        blank=True, help_text="Number of HDD bays", null=True
                    ),
                ),
                (
                    "expansion_slots",
                    models.IntegerField(
                        blank=True, help_text="Number of expansion slots", null=True
                    ),
                ),
                (
                    "fan_support",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("80 mm", "80 mm"),
                            ("92 mm", "92 mm"),
                            ("120 mm", "120 mm"),
                            ("140 mm", "140 mm"),
                            ("200 mm", "200 mm"),
                        ],
                        help_text="Fan support",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "radiator_support",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("120 mm", "120 mm"),
                            ("140 mm", "140 mm"),
                            ("240 mm", "240 mm"),
                            ("280 mm", "280 mm"),
                            ("360 mm", "360 mm"),
                            ("420 mm", "420 mm"),
                            ("480 mm", "480 mm"),
                        ],
                        help_text="Radiator support",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "rgb",
                    models.BooleanField(
                        blank=True, help_text="RGB lighting", null=True
                    ),
                ),
                (
                    "dust_filters",
                    models.BooleanField(
                        blank=True, help_text="Dust filters", null=True
                    ),
                ),
                (
                    "cable_management",
                    models.BooleanField(
                        blank=True, help_text="Cable management", null=True
                    ),
                ),
                (
                    "power_supply",
                    models.BooleanField(
                        blank=True, help_text="With power supply", null=True
                    ),
                ),
                (
                    "pre_installed_fans",
                    models.IntegerField(
                        blank=True, help_text="Number of pre-installed fans", null=True
                    ),
                ),
            ],
            options={
                "verbose_name": "Casing",
                "verbose_name_plural": "Casings",
            },
        ),
        migrations.CreateModel(
            name="Cooler",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Price in BDT",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "regular_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Regular price in BDT",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "brand",
                    models.CharField(
                        blank=True,
                        help_text="Brand of the product",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "model",
                    models.CharField(
                        blank=True,
                        help_text="Model name of the product",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "warranty",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("1 Year", "1 Year"),
                            ("2 Years", "2 Years"),
                            ("3 Years", "3 Years"),
                            ("4 Years", "4 Years"),
                            ("5 Years", "5 Years"),
                            ("10 Years", "10 Years"),
                            ("Lifetime Warranty", "Lifetime Warranty"),
                        ],
                        help_text="Warranty duration",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the product"
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("CPU", "CPU"),
                            ("Cooler", "Cooler"),
                            ("Motherboard", "Motherboard"),
                            ("RAM", "RAM"),
                            ("SSD", "SSD"),
                            ("HDD", "HDD"),
                            ("GPU", "GPU"),
                            ("Power Supply", "Power Supply"),
                            ("Casing", "Casing"),
                            ("Monitor", "Monitor"),
                            ("Keyboard", "Keyboard"),
                            ("Mouse", "Mouse"),
                            ("Headphone", "Headphone"),
                        ],
                        help_text="Category of the product",
                        max_length=50,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "is_featured",
                    models.BooleanField(default=False, help_text="Featured product"),
                ),
                (
                    "stock",
                    models.PositiveIntegerField(
                        default=0, help_text="Available stock quantity"
                    ),
                ),
                (
                    "is_available",
                    models.BooleanField(
                        default=True, help_text="Product availability status"
                    ),
                ),
                (
                    "image1",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Cooler (main)",
                        null=True,
                        upload_to="cooler_images/",
                    ),
                ),
                (
                    "image2",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Cooler (optional)",
                        null=True,
                        upload_to="cooler_images/",
                    ),
                ),
                (
                    "image3",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Cooler (optional)",
                        null=True,
                        upload_to="cooler_images/",
                    ),
                ),
                (
                    "image4",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Cooler (optional)",
                        null=True,
                        upload_to="cooler_images/",
                    ),
                ),
                (
                    "image5",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Cooler (optional)",
                        null=True,
                        upload_to="cooler_images/",
                    ),
                ),
                (
                    "cooler_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Air Cooler", "Air Cooler"),
                            ("Liquid Cooler", "Liquid Cooler"),
                        ],
                        help_text="Cooler Type",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "cooler_size",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("120 mm", "120 mm"),
                            ("140 mm", "140 mm"),
                            ("240 mm", "240 mm"),
                            ("280 mm", "280 mm"),
                            ("360 mm", "360 mm"),
                            ("420 mm", "420 mm"),
                            ("480 mm", "480 mm"),
                        ],
                        help_text="Cooler size",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "fan_speed",
                    models.IntegerField(
                        blank=True,
                        help_text="Fan speed in RPM",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(300),
                            django.core.validators.MaxValueValidator(5000),
                        ],
                    ),
                ),
                (
                    "noise_level",
                    models.IntegerField(
                        blank=True,
                        help_text="Noise level in dB",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(60),
                        ],
                    ),
                ),
                (
                    "rgb",
                    models.BooleanField(
                        blank=True, help_text="RGB lighting", null=True
                    ),
                ),
                (
                    "tdp",
                    models.IntegerField(
                        blank=True,
                        help_text="Thermal Design Power (TDP) in watts",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(500),
                        ],
                    ),
                ),
                (
                    "socket_support",
                    models.CharField(
                        blank=True,
                        help_text="Supported CPU sockets (comma separated)",
                        max_length=200,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Cooler",
                "verbose_name_plural": "Coolers",
            },
        ),
        migrations.CreateModel(
            name="CPU",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Price in BDT",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "regular_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Regular price in BDT",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "brand",
                    models.CharField(
                        blank=True,
                        help_text="Brand of the product",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "model",
                    models.CharField(
                        blank=True,
                        help_text="Model name of the product",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "warranty",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("1 Year", "1 Year"),
                            ("2 Years", "2 Years"),
                            ("3 Years", "3 Years"),
                            ("4 Years", "4 Years"),
                            ("5 Years", "5 Years"),
                            ("10 Years", "10 Years"),
                            ("Lifetime Warranty", "Lifetime Warranty"),
                        ],
                        help_text="Warranty duration",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the product"
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("CPU", "CPU"),
                            ("Cooler", "Cooler"),
                            ("Motherboard", "Motherboard"),
                            ("RAM", "RAM"),
                            ("SSD", "SSD"),
                            ("HDD", "HDD"),
                            ("GPU", "GPU"),
                            ("Power Supply", "Power Supply"),
                            ("Casing", "Casing"),
                            ("Monitor", "Monitor"),
                            ("Keyboard", "Keyboard"),
                            ("Mouse", "Mouse"),
                            ("Headphone", "Headphone"),
                        ],
                        help_text="Category of the product",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "tdp",
                    models.IntegerField(
                        blank=True,
                        help_text="Thermal Design Power (TDP) in watts",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "is_featured",
                    models.BooleanField(default=False, help_text="Featured product"),
                ),
                (
                    "stock",
                    models.PositiveIntegerField(
                        default=0, help_text="Available stock quantity"
                    ),
                ),
                (
                    "is_available",
                    models.BooleanField(
                        default=True, help_text="Product availability status"
                    ),
                ),
                (
                    "image1",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the CPU (main)",
                        null=True,
                        upload_to="cpu_images/",
                    ),
                ),
                (
                    "image2",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the CPU (optional)",
                        null=True,
                        upload_to="cpu_images/",
                    ),
                ),
                (
                    "image3",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the CPU (optional)",
                        null=True,
                        upload_to="cpu_images/",
                    ),
                ),
                (
                    "image4",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the CPU (optional)",
                        null=True,
                        upload_to="cpu_images/",
                    ),
                ),
                (
                    "image5",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the CPU (optional)",
                        null=True,
                        upload_to="cpu_images/",
                    ),
                ),
                (
                    "socket",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("LGA 1200", "LGA 1200"),
                            ("LGA 1700", "LGA 1700"),
                            ("LGA 1851", "LGA 1851"),
                            ("AM4", "AM4"),
                            ("AM5", "AM5"),
                            ("TR4", "TR4"),
                        ],
                        help_text="CPU socket type",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "cores",
                    models.IntegerField(
                        blank=True,
                        help_text="Number of CPU cores",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(128),
                        ],
                    ),
                ),
                (
                    "threads",
                    models.IntegerField(
                        blank=True,
                        help_text="Number of CPU threads",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(256),
                        ],
                    ),
                ),
                (
                    "base_frequency",
                    models.FloatField(
                        blank=True,
                        help_text="Base frequency in GHz",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.1),
                            django.core.validators.MaxValueValidator(10.0),
                        ],
                    ),
                ),
                (
                    "boost_frequency",
                    models.FloatField(
                        blank=True,
                        help_text="Boost frequency in GHz",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.1),
                            django.core.validators.MaxValueValidator(10.0),
                        ],
                    ),
                ),
                (
                    "cache",
                    models.IntegerField(
                        blank=True,
                        help_text="Cache size in MB",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(1024),
                        ],
                    ),
                ),
                (
                    "processor_graphics",
                    models.CharField(
                        blank=True,
                        help_text="Integrated graphics (e.g., Intel UHD, AMD Radeon)",
                        max_length=50,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "CPU",
                "verbose_name_plural": "CPUs",
            },
        ),
        migrations.CreateModel(
            name="GPU",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Price in BDT",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "regular_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Regular price in BDT",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "brand",
                    models.CharField(
                        blank=True,
                        help_text="Brand of the product",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "model",
                    models.CharField(
                        blank=True,
                        help_text="Model name of the product",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "warranty",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("1 Year", "1 Year"),
                            ("2 Years", "2 Years"),
                            ("3 Years", "3 Years"),
                            ("4 Years", "4 Years"),
                            ("5 Years", "5 Years"),
                            ("10 Years", "10 Years"),
                            ("Lifetime Warranty", "Lifetime Warranty"),
                        ],
                        help_text="Warranty duration",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the product"
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("CPU", "CPU"),
                            ("Cooler", "Cooler"),
                            ("Motherboard", "Motherboard"),
                            ("RAM", "RAM"),
                            ("SSD", "SSD"),
                            ("HDD", "HDD"),
                            ("GPU", "GPU"),
                            ("Power Supply", "Power Supply"),
                            ("Casing", "Casing"),
                            ("Monitor", "Monitor"),
                            ("Keyboard", "Keyboard"),
                            ("Mouse", "Mouse"),
                            ("Headphone", "Headphone"),
                        ],
                        help_text="Category of the product",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "tdp",
                    models.IntegerField(
                        blank=True,
                        help_text="Thermal Design Power (TDP) in watts",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "is_featured",
                    models.BooleanField(default=False, help_text="Featured product"),
                ),
                (
                    "stock",
                    models.PositiveIntegerField(
                        default=0, help_text="Available stock quantity"
                    ),
                ),
                (
                    "is_available",
                    models.BooleanField(
                        default=True, help_text="Product availability status"
                    ),
                ),
                (
                    "image1",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the GPU (main)",
                        null=True,
                        upload_to="gpu_images/",
                    ),
                ),
                (
                    "image2",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the GPU (optional)",
                        null=True,
                        upload_to="gpu_images/",
                    ),
                ),
                (
                    "image3",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the GPU (optional)",
                        null=True,
                        upload_to="gpu_images/",
                    ),
                ),
                (
                    "image4",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the GPU (optional)",
                        null=True,
                        upload_to="gpu_images/",
                    ),
                ),
                (
                    "image5",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the GPU (optional)",
                        null=True,
                        upload_to="gpu_images/",
                    ),
                ),
                (
                    "memory_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("DDR3", "DDR3"),
                            ("GDDR5", "GDDR5"),
                            ("GDDR5X", "GDDR5X"),
                            ("GDDR6", "GDDR6"),
                            ("GDDR6X", "GDDR6X"),
                        ],
                        help_text="Type of GPU memory",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "vram_capacity",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("2 GB", "2 GB"),
                            ("4 GB", "4 GB"),
                            ("6 GB", "6 GB"),
                            ("8 GB", "8 GB"),
                            ("12 GB", "12 GB"),
                            ("16 GB", "16 GB"),
                            ("24 GB", "24 GB"),
                            ("32 GB", "32 GB"),
                        ],
                        help_text="VRAM capacity",
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "max_resolution",
                    models.CharField(
                        blank=True,
                        help_text="Max supported resolution",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "core_clock",
                    models.FloatField(
                        blank=True, help_text="Core clock speed in MHz", null=True
                    ),
                ),
                (
                    "memory_clock",
                    models.FloatField(
                        blank=True, help_text="Memory clock speed in MHz", null=True
                    ),
                ),
                (
                    "cores",
                    models.IntegerField(
                        blank=True, help_text="Number of GPU cores", null=True
                    ),
                ),
                (
                    "memory_bus",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("64-bit", "64-bit"),
                            ("128-bit", "128-bit"),
                            ("192-bit", "192-bit"),
                            ("256-bit", "256-bit"),
                            ("384-bit", "384-bit"),
                            ("448-bit", "448-bit"),
                            ("512-bit", "512-bit"),
                        ],
                        help_text="Memory bus width",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "memory_interface",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("PCI Express 3.0", "PCI Express 3.0"),
                            ("PCI Express 4.0", "PCI Express 4.0"),
                            ("PCI Express 5.0", "PCI Express 5.0"),
                        ],
                        help_text="Memory interface",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "core_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("CUDA Cores", "CUDA Cores"),
                            ("Stream Processors", "Stream Processors"),
                            ("RDNA Cores", "RDNA Cores"),
                            ("Xe Cores", "Xe Cores"),
                        ],
                        help_text="Type of GPU cores",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "dp_ports",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("DisplayPort x1", "DisplayPort x1"),
                            ("DisplayPort x2", "DisplayPort x2"),
                            ("DisplayPort x3", "DisplayPort x3"),
                            ("DisplayPort x4", "DisplayPort x4"),
                        ],
                        help_text="DisplayPort ports",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "hdmi_ports",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("HDMI x1", "HDMI x1"),
                            ("HDMI x2", "HDMI x2"),
                            ("HDMI x3", "HDMI x3"),
                            ("HDMI x4", "HDMI x4"),
                        ],
                        help_text="HDMI ports",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "vga_ports",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("VGA x1", "VGA x1"),
                            ("VGA x2", "VGA x2"),
                            ("VGA x3", "VGA x3"),
                            ("VGA x4", "VGA x4"),
                        ],
                        help_text="VGA ports",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "dvi_ports",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("DVI x1", "DVI x1"),
                            ("DVI x2", "DVI x2"),
                            ("DVI x3", "DVI x3"),
                            ("DVI x4", "DVI x4"),
                        ],
                        help_text="DVI ports",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "connectors",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("6 Pin Connector", "6 Pin Connector"),
                            ("8 Pin Connector", "8 Pin Connector"),
                            ("8+8 Pin Connector", "8+8 Pin Connector"),
                            ("16 Pin Connector", "16 Pin Connector"),
                        ],
                        help_text="Power connectors",
                        max_length=50,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "GPU",
                "verbose_name_plural": "GPUs",
            },
        ),
        migrations.CreateModel(
            name="HDD",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Price in BDT",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "regular_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Regular price in BDT",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "brand",
                    models.CharField(
                        blank=True,
                        help_text="Brand of the product",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "model",
                    models.CharField(
                        blank=True,
                        help_text="Model name of the product",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "warranty",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("1 Year", "1 Year"),
                            ("2 Years", "2 Years"),
                            ("3 Years", "3 Years"),
                            ("4 Years", "4 Years"),
                            ("5 Years", "5 Years"),
                            ("10 Years", "10 Years"),
                            ("Lifetime Warranty", "Lifetime Warranty"),
                        ],
                        help_text="Warranty duration",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the product"
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("CPU", "CPU"),
                            ("Cooler", "Cooler"),
                            ("Motherboard", "Motherboard"),
                            ("RAM", "RAM"),
                            ("SSD", "SSD"),
                            ("HDD", "HDD"),
                            ("GPU", "GPU"),
                            ("Power Supply", "Power Supply"),
                            ("Casing", "Casing"),
                            ("Monitor", "Monitor"),
                            ("Keyboard", "Keyboard"),
                            ("Mouse", "Mouse"),
                            ("Headphone", "Headphone"),
                        ],
                        help_text="Category of the product",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "tdp",
                    models.IntegerField(
                        blank=True,
                        help_text="Thermal Design Power (TDP) in watts",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "is_featured",
                    models.BooleanField(default=False, help_text="Featured product"),
                ),
                (
                    "stock",
                    models.PositiveIntegerField(
                        default=0, help_text="Available stock quantity"
                    ),
                ),
                (
                    "is_available",
                    models.BooleanField(
                        default=True, help_text="Product availability status"
                    ),
                ),
                (
                    "image1",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the HDD (main)",
                        null=True,
                        upload_to="hdd_images/",
                    ),
                ),
                (
                    "image2",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the HDD (optional)",
                        null=True,
                        upload_to="hdd_images/",
                    ),
                ),
                (
                    "image3",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the HDD (optional)",
                        null=True,
                        upload_to="hdd_images/",
                    ),
                ),
                (
                    "image4",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the HDD (optional)",
                        null=True,
                        upload_to="hdd_images/",
                    ),
                ),
                (
                    "image5",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the HDD (optional)",
                        null=True,
                        upload_to="hdd_images/",
                    ),
                ),
                (
                    "storage_capacity",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("500 GB", "500 GB"),
                            ("1 TB", "1 TB"),
                            ("2 TB", "2 TB"),
                            ("4 TB", "4 TB"),
                            ("6 TB", "6 TB"),
                            ("8 TB", "8 TB"),
                            ("10 TB", "10 TB"),
                            ("12 TB", "12 TB"),
                            ("14 TB", "14 TB"),
                            ("16 TB", "16 TB"),
                            ("18 TB", "18 TB"),
                        ],
                        help_text="Storage capacity",
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "form_factor",
                    models.CharField(
                        blank=True,
                        choices=[("2.5-inch", "2.5-inch"), ("3.5-inch", "3.5-inch")],
                        help_text="Form factor",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "interface",
                    models.CharField(
                        blank=True,
                        choices=[("SATA II", "SATA II"), ("SATA III", "SATA III")],
                        help_text="Interface",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "rpm",
                    models.CharField(
                        blank=True,
                        choices=[("5400 RPM", "5400 RPM"), ("7200 RPM", "7200 RPM")],
                        help_text="Rotational speed",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "cache",
                    models.IntegerField(
                        blank=True, help_text="Cache size in MB", null=True
                    ),
                ),
            ],
            options={
                "verbose_name": "HDD",
                "verbose_name_plural": "HDDs",
            },
        ),
        migrations.CreateModel(
            name="Headphone",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Price in BDT",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "regular_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Regular price in BDT",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "brand",
                    models.CharField(
                        blank=True,
                        help_text="Brand of the product",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "model",
                    models.CharField(
                        blank=True,
                        help_text="Model name of the product",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "warranty",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("1 Year", "1 Year"),
                            ("2 Years", "2 Years"),
                            ("3 Years", "3 Years"),
                            ("4 Years", "4 Years"),
                            ("5 Years", "5 Years"),
                            ("10 Years", "10 Years"),
                            ("Lifetime Warranty", "Lifetime Warranty"),
                        ],
                        help_text="Warranty duration",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the product"
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("CPU", "CPU"),
                            ("Cooler", "Cooler"),
                            ("Motherboard", "Motherboard"),
                            ("RAM", "RAM"),
                            ("SSD", "SSD"),
                            ("HDD", "HDD"),
                            ("GPU", "GPU"),
                            ("Power Supply", "Power Supply"),
                            ("Casing", "Casing"),
                            ("Monitor", "Monitor"),
                            ("Keyboard", "Keyboard"),
                            ("Mouse", "Mouse"),
                            ("Headphone", "Headphone"),
                        ],
                        help_text="Category of the product",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "tdp",
                    models.IntegerField(
                        blank=True,
                        help_text="Thermal Design Power (TDP) in watts",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "is_featured",
                    models.BooleanField(default=False, help_text="Featured product"),
                ),
                (
                    "stock",
                    models.PositiveIntegerField(
                        default=0, help_text="Available stock quantity"
                    ),
                ),
                (
                    "is_available",
                    models.BooleanField(
                        default=True, help_text="Product availability status"
                    ),
                ),
                (
                    "image1",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Headphone (main)",
                        null=True,
                        upload_to="headphone_images/",
                    ),
                ),
                (
                    "image2",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Headphone (optional)",
                        null=True,
                        upload_to="headphone_images/",
                    ),
                ),
                (
                    "image3",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Headphone (optional)",
                        null=True,
                        upload_to="headphone_images/",
                    ),
                ),
                (
                    "image4",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Headphone (optional)",
                        null=True,
                        upload_to="headphone_images/",
                    ),
                ),
                (
                    "image5",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Headphone (optional)",
                        null=True,
                        upload_to="headphone_images/",
                    ),
                ),
                (
                    "headphone_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Standard", "Standard"),
                            ("Gaming", "Gaming"),
                            ("Studio", "Studio"),
                            ("Professional", "Professional"),
                        ],
                        help_text="Headphone Type",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "connection",
                    models.CharField(
                        blank=True,
                        choices=[("Wired", "Wired"), ("Wireless", "Wireless")],
                        help_text="Connection",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "microphone",
                    models.BooleanField(blank=True, help_text="Microphone", null=True),
                ),
                (
                    "noise_cancellation",
                    models.BooleanField(
                        blank=True, help_text="Noise Cancellation", null=True
                    ),
                ),
                (
                    "rgb",
                    models.BooleanField(
                        blank=True, help_text="RGB lighting", null=True
                    ),
                ),
                (
                    "frequency_response",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("20 Hz - 20 kHz", "20 Hz - 20 kHz"),
                            ("10 Hz - 40 kHz", "10 Hz - 40 kHz"),
                            ("5 Hz - 50 kHz", "5 Hz - 50 kHz"),
                        ],
                        help_text="Frequency Response",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "impedance",
                    models.IntegerField(
                        blank=True, help_text="Impedance in ohms", null=True
                    ),
                ),
                (
                    "sensitivity",
                    models.IntegerField(
                        blank=True, help_text="Sensitivity in dB", null=True
                    ),
                ),
                (
                    "input_jack",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("3.5 mm", "3.5 mm"),
                            ("USB-A", "USB-A"),
                            ("USB-C", "USB-C"),
                        ],
                        help_text="Input Jack",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "cable_length",
                    models.IntegerField(
                        blank=True, help_text="Cable length in meters", null=True
                    ),
                ),
            ],
            options={
                "verbose_name": "Headphone",
                "verbose_name_plural": "Headphones",
            },
        ),
        migrations.CreateModel(
            name="Keyboard",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Price in BDT",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "regular_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Regular price in BDT",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "brand",
                    models.CharField(
                        blank=True,
                        help_text="Brand of the product",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "model",
                    models.CharField(
                        blank=True,
                        help_text="Model name of the product",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "warranty",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("1 Year", "1 Year"),
                            ("2 Years", "2 Years"),
                            ("3 Years", "3 Years"),
                            ("4 Years", "4 Years"),
                            ("5 Years", "5 Years"),
                            ("10 Years", "10 Years"),
                            ("Lifetime Warranty", "Lifetime Warranty"),
                        ],
                        help_text="Warranty duration",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the product"
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("CPU", "CPU"),
                            ("Cooler", "Cooler"),
                            ("Motherboard", "Motherboard"),
                            ("RAM", "RAM"),
                            ("SSD", "SSD"),
                            ("HDD", "HDD"),
                            ("GPU", "GPU"),
                            ("Power Supply", "Power Supply"),
                            ("Casing", "Casing"),
                            ("Monitor", "Monitor"),
                            ("Keyboard", "Keyboard"),
                            ("Mouse", "Mouse"),
                            ("Headphone", "Headphone"),
                        ],
                        help_text="Category of the product",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "tdp",
                    models.IntegerField(
                        blank=True,
                        help_text="Thermal Design Power (TDP) in watts",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "is_featured",
                    models.BooleanField(default=False, help_text="Featured product"),
                ),
                (
                    "stock",
                    models.PositiveIntegerField(
                        default=0, help_text="Available stock quantity"
                    ),
                ),
                (
                    "is_available",
                    models.BooleanField(
                        default=True, help_text="Product availability status"
                    ),
                ),
                (
                    "image1",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Keyboard (main)",
                        null=True,
                        upload_to="keyboard_images/",
                    ),
                ),
                (
                    "image2",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Keyboard (optional)",
                        null=True,
                        upload_to="keyboard_images/",
                    ),
                ),
                (
                    "image3",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Keyboard (optional)",
                        null=True,
                        upload_to="keyboard_images/",
                    ),
                ),
                (
                    "image4",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Keyboard (optional)",
                        null=True,
                        upload_to="keyboard_images/",
                    ),
                ),
                (
                    "image5",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Keyboard (optional)",
                        null=True,
                        upload_to="keyboard_images/",
                    ),
                ),
                (
                    "key_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Membrane", "Membrane"),
                            ("Mechanical", "Mechanical"),
                        ],
                        help_text="Key Types",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "interface",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("USB-A", "USB-A"),
                            ("PS-2", "PS-2"),
                            ("Wireless", "Wireless"),
                            ("USB Type-C", "USB Type-C"),
                        ],
                        help_text="Interface",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "keyboard_size",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Full-size Keyboard (100%)", "Full-size Keyboard (100%)"),
                            (
                                "Tenkeyless Keyboard (TKL) (~87%)",
                                "Tenkeyless Keyboard (TKL) (~87%)",
                            ),
                            ("75% Keyboard (~75%)", "75% Keyboard (~75%)"),
                            ("65% Keyboard (~65%)", "65% Keyboard (~65%)"),
                            ("60% Keyboard (~60%)", "60% Keyboard (~60%)"),
                        ],
                        help_text="Keyboard Size",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "number_of_keys",
                    models.IntegerField(
                        blank=True, help_text="Number of keys", null=True
                    ),
                ),
                (
                    "switch_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Standard", "Standard"),
                            ("Blue", "Blue"),
                            ("Red", "Red"),
                            ("Brown", "Brown"),
                            ("Yellow", "Yellow"),
                            ("Green", "Green"),
                            ("Silver", "Silver"),
                            ("Silent", "Silent"),
                            ("Tactile", "Tactile"),
                            ("Clicky", "Clicky"),
                            ("Linear", "Linear"),
                            ("Speed", "Speed"),
                            ("Optical", "Optical"),
                        ],
                        help_text="Switch Type",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "cable_length",
                    models.IntegerField(
                        blank=True, help_text="Cable length in meters", null=True
                    ),
                ),
                (
                    "rgb",
                    models.BooleanField(
                        blank=True, help_text="RGB lighting", null=True
                    ),
                ),
            ],
            options={
                "verbose_name": "Keyboard",
                "verbose_name_plural": "Keyboards",
            },
        ),
        migrations.CreateModel(
            name="Monitor",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Price in BDT",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "regular_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Regular price in BDT",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "brand",
                    models.CharField(
                        blank=True,
                        help_text="Brand of the product",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "model",
                    models.CharField(
                        blank=True,
                        help_text="Model name of the product",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "warranty",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("1 Year", "1 Year"),
                            ("2 Years", "2 Years"),
                            ("3 Years", "3 Years"),
                            ("4 Years", "4 Years"),
                            ("5 Years", "5 Years"),
                            ("10 Years", "10 Years"),
                            ("Lifetime Warranty", "Lifetime Warranty"),
                        ],
                        help_text="Warranty duration",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the product"
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("CPU", "CPU"),
                            ("Cooler", "Cooler"),
                            ("Motherboard", "Motherboard"),
                            ("RAM", "RAM"),
                            ("SSD", "SSD"),
                            ("HDD", "HDD"),
                            ("GPU", "GPU"),
                            ("Power Supply", "Power Supply"),
                            ("Casing", "Casing"),
                            ("Monitor", "Monitor"),
                            ("Keyboard", "Keyboard"),
                            ("Mouse", "Mouse"),
                            ("Headphone", "Headphone"),
                        ],
                        help_text="Category of the product",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "tdp",
                    models.IntegerField(
                        blank=True,
                        help_text="Thermal Design Power (TDP) in watts",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "is_featured",
                    models.BooleanField(default=False, help_text="Featured product"),
                ),
                (
                    "stock",
                    models.PositiveIntegerField(
                        default=0, help_text="Available stock quantity"
                    ),
                ),
                (
                    "is_available",
                    models.BooleanField(
                        default=True, help_text="Product availability status"
                    ),
                ),
                (
                    "image1",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Monitor (main)",
                        null=True,
                        upload_to="monitor_images/",
                    ),
                ),
                (
                    "image2",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Monitor (optional)",
                        null=True,
                        upload_to="monitor_images/",
                    ),
                ),
                (
                    "image3",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Monitor (optional)",
                        null=True,
                        upload_to="monitor_images/",
                    ),
                ),
                (
                    "image4",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Monitor (optional)",
                        null=True,
                        upload_to="monitor_images/",
                    ),
                ),
                (
                    "image5",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Monitor (optional)",
                        null=True,
                        upload_to="monitor_images/",
                    ),
                ),
                (
                    "screen_resolution",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("1280 x 720", "1280 x 720"),
                            ("1920 x 1080", "1920 x 1080"),
                            ("2560 x 1440", "2560 x 1440"),
                            ("3840 x 2160", "3840 x 2160"),
                            ("7680 x 4320", "7680 x 4320"),
                            ("2560 x 1080", "2560 x 1080"),
                            ("3440 x 1440", "3440 x 1440"),
                            ("5120 x 2160", "5120 x 2160"),
                            ("5120 x 1440", "5120 x 1440"),
                        ],
                        help_text="Screen Resolution",
                        max_length=25,
                        null=True,
                    ),
                ),
                (
                    "aspect_ratio",
                    models.CharField(
                        blank=True,
                        choices=[("16:9", "16:9"), ("21:9", "21:9"), ("32:9", "32:9")],
                        help_text="Aspect Ratio",
                        max_length=25,
                        null=True,
                    ),
                ),
                (
                    "screen_size",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("18-inch", "18-inch"),
                            ("22-inch", "22-inch"),
                            ("24-inch", "24-inch"),
                            ("32-inch", "32-inch"),
                            ("29-inch", "29-inch"),
                            ("34-inch", "34-inch"),
                            ("38-inch", "38-inch"),
                        ],
                        help_text="Screen Size",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "vga_ports",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("VGA x1", "VGA x1"),
                            ("VGA x2", "VGA x2"),
                            ("VGA x3", "VGA x3"),
                            ("VGA x4", "VGA x4"),
                        ],
                        help_text="VGA ports",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "hdmi_ports",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("HDMI x1", "HDMI x1"),
                            ("HDMI x2", "HDMI x2"),
                            ("HDMI x3", "HDMI x3"),
                            ("HDMI x4", "HDMI x4"),
                        ],
                        help_text="HDMI ports",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "dp_ports",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("DisplayPort x1", "DisplayPort x1"),
                            ("DisplayPort x2", "DisplayPort x2"),
                            ("DisplayPort x3", "DisplayPort x3"),
                            ("DisplayPort x4", "DisplayPort x4"),
                        ],
                        help_text="DisplayPort ports",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "dvi_ports",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("DVI x1", "DVI x1"),
                            ("DVI x2", "DVI x2"),
                            ("DVI x3", "DVI x3"),
                            ("DVI x4", "DVI x4"),
                        ],
                        help_text="DVI ports",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "usb_c_ports",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("USB-C x1", "USB-C x1"),
                            ("USB-C x2", "USB-C x2"),
                            ("USB-C x3", "USB-C x3"),
                            ("USB-C x4", "USB-C x4"),
                        ],
                        help_text="USB-C ports",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "usb_ports",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("USB x1", "USB x1"),
                            ("USB x2", "USB x2"),
                            ("USB x3", "USB x3"),
                            ("USB x4", "USB x4"),
                        ],
                        help_text="USB ports",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "speakers",
                    models.BooleanField(
                        blank=True, help_text="Built-in speakers", null=True
                    ),
                ),
                (
                    "refresh_rate",
                    models.IntegerField(
                        blank=True, help_text="Refresh rate in Hz", null=True
                    ),
                ),
                (
                    "response_time",
                    models.IntegerField(
                        blank=True, help_text="Response time in ms", null=True
                    ),
                ),
                (
                    "brightness",
                    models.IntegerField(
                        blank=True, help_text="Brightness in cd/m²", null=True
                    ),
                ),
            ],
            options={
                "verbose_name": "Monitor",
                "verbose_name_plural": "Monitors",
            },
        ),
        migrations.CreateModel(
            name="Motherboard",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Price in BDT",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "regular_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Regular price in BDT",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "brand",
                    models.CharField(
                        blank=True,
                        help_text="Brand of the product",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "model",
                    models.CharField(
                        blank=True,
                        help_text="Model name of the product",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "warranty",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("1 Year", "1 Year"),
                            ("2 Years", "2 Years"),
                            ("3 Years", "3 Years"),
                            ("4 Years", "4 Years"),
                            ("5 Years", "5 Years"),
                            ("10 Years", "10 Years"),
                            ("Lifetime Warranty", "Lifetime Warranty"),
                        ],
                        help_text="Warranty duration",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the product"
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("CPU", "CPU"),
                            ("Cooler", "Cooler"),
                            ("Motherboard", "Motherboard"),
                            ("RAM", "RAM"),
                            ("SSD", "SSD"),
                            ("HDD", "HDD"),
                            ("GPU", "GPU"),
                            ("Power Supply", "Power Supply"),
                            ("Casing", "Casing"),
                            ("Monitor", "Monitor"),
                            ("Keyboard", "Keyboard"),
                            ("Mouse", "Mouse"),
                            ("Headphone", "Headphone"),
                        ],
                        help_text="Category of the product",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "tdp",
                    models.IntegerField(
                        blank=True,
                        help_text="Thermal Design Power (TDP) in watts",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "is_featured",
                    models.BooleanField(default=False, help_text="Featured product"),
                ),
                (
                    "stock",
                    models.PositiveIntegerField(
                        default=0, help_text="Available stock quantity"
                    ),
                ),
                (
                    "is_available",
                    models.BooleanField(
                        default=True, help_text="Product availability status"
                    ),
                ),
                (
                    "image1",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Motherboard (main)",
                        null=True,
                        upload_to="motherboard_images/",
                    ),
                ),
                (
                    "image2",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Motherboard (optional)",
                        null=True,
                        upload_to="motherboard_images/",
                    ),
                ),
                (
                    "image3",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Motherboard (optional)",
                        null=True,
                        upload_to="motherboard_images/",
                    ),
                ),
                (
                    "image4",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Motherboard (optional)",
                        null=True,
                        upload_to="motherboard_images/",
                    ),
                ),
                (
                    "image5",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Motherboard (optional)",
                        null=True,
                        upload_to="motherboard_images/",
                    ),
                ),
                (
                    "form_factor",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ATX", "ATX"),
                            ("Micro-ATX", "Micro-ATX"),
                            ("Mini-ITX", "Mini-ITX"),
                            ("E-ATX", "E-ATX"),
                        ],
                        help_text="Form factor",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "socket",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("LGA 1200", "LGA 1200"),
                            ("LGA 1700", "LGA 1700"),
                            ("LGA 1851", "LGA 1851"),
                            ("AM4", "AM4"),
                            ("AM5", "AM5"),
                            ("TR4", "TR4"),
                        ],
                        help_text="Socket",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "chipset",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("H510", "H510"),
                            ("B460", "B460"),
                            ("H610", "H610"),
                            ("B660", "B660"),
                            ("B760", "B760"),
                            ("Z790", "Z790"),
                            ("Z890", "Z890"),
                            ("A520", "A520"),
                            ("B450", "B450"),
                            ("B550", "B550"),
                            ("X570", "X570"),
                            ("A620", "A620"),
                            ("B650", "B650"),
                            ("X670", "X670"),
                            ("X670E", "X670E"),
                            ("X870", "X870"),
                            ("X870E", "X870E"),
                            ("TRX40", "TRX40"),
                        ],
                        help_text="Chipset",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "memory_slots",
                    models.IntegerField(
                        blank=True, help_text="Number of memory slots", null=True
                    ),
                ),
                (
                    "memory_type",
                    models.CharField(
                        choices=[("DDR4", "DDR4"), ("DDR5", "DDR5")],
                        help_text="Type of RAM",
                        max_length=50,
                    ),
                ),
                (
                    "max_memory",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("32 GB", "32 GB"),
                            ("64 GB", "64 GB"),
                            ("128 GB", "128 GB"),
                            ("256 GB", "256 GB"),
                            ("512 GB", "512 GB"),
                            ("1 TB", "1 TB"),
                            ("2 TB", "2 TB"),
                        ],
                        help_text="Maximum memory capacity",
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "pcie_slots",
                    models.IntegerField(
                        blank=True, help_text="Number of PCIe slots", null=True
                    ),
                ),
                (
                    "m2_slots",
                    models.IntegerField(
                        blank=True, help_text="Number of M.2 slots", null=True
                    ),
                ),
                (
                    "sata_ports",
                    models.IntegerField(
                        blank=True, help_text="Number of SATA ports", null=True
                    ),
                ),
                (
                    "usb_ports",
                    models.IntegerField(
                        blank=True, help_text="Number of USB ports", null=True
                    ),
                ),
                (
                    "wifi_bluetooth",
                    models.BooleanField(
                        blank=True, help_text="Wi-Fi and Bluetooth support", null=True
                    ),
                ),
            ],
            options={
                "verbose_name": "Motherboard",
                "verbose_name_plural": "Motherboards",
            },
        ),
        migrations.CreateModel(
            name="Mouse",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Price in BDT",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "regular_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Regular price in BDT",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "brand",
                    models.CharField(
                        blank=True,
                        help_text="Brand of the product",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "model",
                    models.CharField(
                        blank=True,
                        help_text="Model name of the product",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "warranty",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("1 Year", "1 Year"),
                            ("2 Years", "2 Years"),
                            ("3 Years", "3 Years"),
                            ("4 Years", "4 Years"),
                            ("5 Years", "5 Years"),
                            ("10 Years", "10 Years"),
                            ("Lifetime Warranty", "Lifetime Warranty"),
                        ],
                        help_text="Warranty duration",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the product"
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("CPU", "CPU"),
                            ("Cooler", "Cooler"),
                            ("Motherboard", "Motherboard"),
                            ("RAM", "RAM"),
                            ("SSD", "SSD"),
                            ("HDD", "HDD"),
                            ("GPU", "GPU"),
                            ("Power Supply", "Power Supply"),
                            ("Casing", "Casing"),
                            ("Monitor", "Monitor"),
                            ("Keyboard", "Keyboard"),
                            ("Mouse", "Mouse"),
                            ("Headphone", "Headphone"),
                        ],
                        help_text="Category of the product",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "tdp",
                    models.IntegerField(
                        blank=True,
                        help_text="Thermal Design Power (TDP) in watts",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "is_featured",
                    models.BooleanField(default=False, help_text="Featured product"),
                ),
                (
                    "stock",
                    models.PositiveIntegerField(
                        default=0, help_text="Available stock quantity"
                    ),
                ),
                (
                    "is_available",
                    models.BooleanField(
                        default=True, help_text="Product availability status"
                    ),
                ),
                (
                    "image1",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Mouse (main)",
                        null=True,
                        upload_to="mouse_images/",
                    ),
                ),
                (
                    "image2",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Mouse (optional)",
                        null=True,
                        upload_to="mouse_images/",
                    ),
                ),
                (
                    "image3",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Mouse (optional)",
                        null=True,
                        upload_to="mouse_images/",
                    ),
                ),
                (
                    "image4",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Mouse (optional)",
                        null=True,
                        upload_to="mouse_images/",
                    ),
                ),
                (
                    "image5",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the Mouse (optional)",
                        null=True,
                        upload_to="mouse_images/",
                    ),
                ),
                (
                    "mouse_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Membrane", "Membrane"),
                            ("Mechanical", "Mechanical"),
                        ],
                        help_text="Mouse Types",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "interface",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("USB-A", "USB-A"),
                            ("PS-2", "PS-2"),
                            ("Wireless", "Wireless"),
                            ("USB Type-C", "USB Type-C"),
                        ],
                        help_text="Interface",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "use_type",
                    models.CharField(
                        blank=True,
                        choices=[("Gaming", "Gaming"), ("Office", "Office")],
                        help_text="Mouse Type",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "number_of_buttons",
                    models.IntegerField(
                        blank=True, help_text="Number of buttons", null=True
                    ),
                ),
                ("max_dpi", models.IntegerField(blank=True, null=True)),
                ("cable_length", models.IntegerField(blank=True, null=True)),
                ("rgb", models.BooleanField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Mouse",
                "verbose_name_plural": "Mice",
            },
        ),
        migrations.CreateModel(
            name="PowerSupply",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Price in BDT",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "regular_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Regular price in BDT",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "brand",
                    models.CharField(
                        blank=True,
                        help_text="Brand of the product",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "model",
                    models.CharField(
                        blank=True,
                        help_text="Model name of the product",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "warranty",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("1 Year", "1 Year"),
                            ("2 Years", "2 Years"),
                            ("3 Years", "3 Years"),
                            ("4 Years", "4 Years"),
                            ("5 Years", "5 Years"),
                            ("10 Years", "10 Years"),
                            ("Lifetime Warranty", "Lifetime Warranty"),
                        ],
                        help_text="Warranty duration",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the product"
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("CPU", "CPU"),
                            ("Cooler", "Cooler"),
                            ("Motherboard", "Motherboard"),
                            ("RAM", "RAM"),
                            ("SSD", "SSD"),
                            ("HDD", "HDD"),
                            ("GPU", "GPU"),
                            ("Power Supply", "Power Supply"),
                            ("Casing", "Casing"),
                            ("Monitor", "Monitor"),
                            ("Keyboard", "Keyboard"),
                            ("Mouse", "Mouse"),
                            ("Headphone", "Headphone"),
                        ],
                        help_text="Category of the product",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "tdp",
                    models.IntegerField(
                        blank=True,
                        help_text="Thermal Design Power (TDP) in watts",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "is_featured",
                    models.BooleanField(default=False, help_text="Featured product"),
                ),
                (
                    "stock",
                    models.PositiveIntegerField(
                        default=0, help_text="Available stock quantity"
                    ),
                ),
                (
                    "is_available",
                    models.BooleanField(
                        default=True, help_text="Product availability status"
                    ),
                ),
                (
                    "image1",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the PSU (main)",
                        null=True,
                        upload_to="psu_images/",
                    ),
                ),
                (
                    "image2",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the PSU (optional)",
                        null=True,
                        upload_to="psu_images/",
                    ),
                ),
                (
                    "image3",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the PSU (optional)",
                        null=True,
                        upload_to="psu_images/",
                    ),
                ),
                (
                    "image4",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the PSU (optional)",
                        null=True,
                        upload_to="psu_images/",
                    ),
                ),
                (
                    "image5",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the PSU (optional)",
                        null=True,
                        upload_to="psu_images/",
                    ),
                ),
                (
                    "form_factor",
                    models.CharField(
                        blank=True,
                        choices=[("ATX", "ATX"), ("SFX", "SFX")],
                        help_text="Form factor",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "wattage",
                    models.IntegerField(blank=True, help_text="Wattage", null=True),
                ),
                (
                    "efficiency",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("80 Plus", "80 Plus"),
                            ("80 Plus White", "80 Plus White"),
                            ("80 Plus Bronze", "80 Plus Bronze"),
                            ("80 Plus Silver", "80 Plus Silver"),
                            ("80 Plus Gold", "80 Plus Gold"),
                            ("80 Plus Platinum", "80 Plus Platinum"),
                            ("80 Plus Titanium", "80 Plus Titanium"),
                        ],
                        help_text="Efficiency rating",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "modularity",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Non-Modular", "Non-Modular"),
                            ("Semi-Modular", "Semi-Modular"),
                            ("Fully Modular", "Fully Modular"),
                        ],
                        help_text="Modularity",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "fan_size",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("80 mm", "80 mm"),
                            ("92 mm", "92 mm"),
                            ("120 mm", "120 mm"),
                            ("140 mm", "140 mm"),
                            ("200 mm", "200 mm"),
                        ],
                        help_text="Fan size",
                        max_length=50,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Power Supply",
                "verbose_name_plural": "Power Supplies",
            },
        ),
        migrations.CreateModel(
            name="RAM",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Price in BDT",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "regular_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Regular price in BDT",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "brand",
                    models.CharField(
                        blank=True,
                        help_text="Brand of the product",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "model",
                    models.CharField(
                        blank=True,
                        help_text="Model name of the product",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "warranty",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("1 Year", "1 Year"),
                            ("2 Years", "2 Years"),
                            ("3 Years", "3 Years"),
                            ("4 Years", "4 Years"),
                            ("5 Years", "5 Years"),
                            ("10 Years", "10 Years"),
                            ("Lifetime Warranty", "Lifetime Warranty"),
                        ],
                        help_text="Warranty duration",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the product"
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("CPU", "CPU"),
                            ("Cooler", "Cooler"),
                            ("Motherboard", "Motherboard"),
                            ("RAM", "RAM"),
                            ("SSD", "SSD"),
                            ("HDD", "HDD"),
                            ("GPU", "GPU"),
                            ("Power Supply", "Power Supply"),
                            ("Casing", "Casing"),
                            ("Monitor", "Monitor"),
                            ("Keyboard", "Keyboard"),
                            ("Mouse", "Mouse"),
                            ("Headphone", "Headphone"),
                        ],
                        help_text="Category of the product",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "tdp",
                    models.IntegerField(
                        blank=True,
                        help_text="Thermal Design Power (TDP) in watts",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "is_featured",
                    models.BooleanField(default=False, help_text="Featured product"),
                ),
                (
                    "stock",
                    models.PositiveIntegerField(
                        default=0, help_text="Available stock quantity"
                    ),
                ),
                (
                    "is_available",
                    models.BooleanField(
                        default=True, help_text="Product availability status"
                    ),
                ),
                (
                    "image1",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the RAM (main)",
                        null=True,
                        upload_to="ram_images/",
                    ),
                ),
                (
                    "image2",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the RAM (optional)",
                        null=True,
                        upload_to="ram_images/",
                    ),
                ),
                (
                    "image3",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the RAM (optional)",
                        null=True,
                        upload_to="ram_images/",
                    ),
                ),
                (
                    "image4",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the RAM (optional)",
                        null=True,
                        upload_to="ram_images/",
                    ),
                ),
                (
                    "image5",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the RAM (optional)",
                        null=True,
                        upload_to="ram_images/",
                    ),
                ),
                (
                    "ram_class",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Desktop", "Desktop"),
                            ("Laptop", "Laptop"),
                            ("Server", "Server"),
                        ],
                        help_text="Type of RAM",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "ram_type",
                    models.CharField(
                        choices=[
                            ("DDR3", "DDR3"),
                            ("DDR4", "DDR4"),
                            ("DDR5", "DDR5"),
                            ("LPDDR3", "LPDDR3"),
                            ("LPDDR4", "LPDDR4"),
                            ("LPDDR5", "LPDDR5"),
                            ("ECC DDR4", "ECC DDR4"),
                            ("ECC DDR5", "ECC DDR5"),
                        ],
                        help_text="Type of RAM",
                        max_length=50,
                    ),
                ),
                (
                    "memory_capacity",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("4 GB", "4 GB"),
                            ("8 GB", "8 GB"),
                            ("16 GB", "16 GB"),
                            ("32 GB", "32 GB"),
                            ("64 GB", "64 GB"),
                        ],
                        help_text="RAM capacity",
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "frequency",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("1333 MHz", "1333 MHz"),
                            ("1600 MHz", "1600 MHz"),
                            ("1866 MHz", "1866 MHz"),
                            ("2133 MHz", "2133 MHz"),
                            ("2400 MHz", "2400 MHz"),
                            ("2666 MHz", "2666 MHz"),
                            ("3000 MHz", "3000 MHz"),
                            ("3200 MHz", "3200 MHz"),
                            ("3600 MHz", "3600 MHz"),
                            ("4000 MHz", "4000 MHz"),
                            ("4266 MHz", "4266 MHz"),
                            ("4400 MHz", "4400 MHz"),
                            ("4600 MHz", "4600 MHz"),
                            ("4800 MHz", "4800 MHz"),
                            ("5000 MHz", "5000 MHz"),
                            ("5200 MHz", "5200 MHz"),
                            ("5400 MHz", "5400 MHz"),
                            ("5600 MHz", "5600 MHz"),
                            ("5800 MHz", "5800 MHz"),
                            ("6000 MHz", "6000 MHz"),
                            ("6400 MHz", "6400 MHz"),
                            ("6800 MHz", "6800 MHz"),
                            ("7200 MHz", "7200 MHz"),
                            ("7400 MHz", "7400 MHz"),
                            ("7600 MHz", "7600 MHz"),
                            ("7800 MHz", "7800 MHz"),
                            ("8000 MHz", "8000 MHz"),
                        ],
                        help_text="Frequency",
                        max_length=50,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "RAM",
                "verbose_name_plural": "RAMs",
            },
        ),
        migrations.CreateModel(
            name="SSD",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Price in BDT",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "regular_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Regular price in BDT",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "brand",
                    models.CharField(
                        blank=True,
                        help_text="Brand of the product",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "model",
                    models.CharField(
                        blank=True,
                        help_text="Model name of the product",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "warranty",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("1 Year", "1 Year"),
                            ("2 Years", "2 Years"),
                            ("3 Years", "3 Years"),
                            ("4 Years", "4 Years"),
                            ("5 Years", "5 Years"),
                            ("10 Years", "10 Years"),
                            ("Lifetime Warranty", "Lifetime Warranty"),
                        ],
                        help_text="Warranty duration",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the product"
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("CPU", "CPU"),
                            ("Cooler", "Cooler"),
                            ("Motherboard", "Motherboard"),
                            ("RAM", "RAM"),
                            ("SSD", "SSD"),
                            ("HDD", "HDD"),
                            ("GPU", "GPU"),
                            ("Power Supply", "Power Supply"),
                            ("Casing", "Casing"),
                            ("Monitor", "Monitor"),
                            ("Keyboard", "Keyboard"),
                            ("Mouse", "Mouse"),
                            ("Headphone", "Headphone"),
                        ],
                        help_text="Category of the product",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "tdp",
                    models.IntegerField(
                        blank=True,
                        help_text="Thermal Design Power (TDP) in watts",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "is_featured",
                    models.BooleanField(default=False, help_text="Featured product"),
                ),
                (
                    "stock",
                    models.PositiveIntegerField(
                        default=0, help_text="Available stock quantity"
                    ),
                ),
                (
                    "is_available",
                    models.BooleanField(
                        default=True, help_text="Product availability status"
                    ),
                ),
                (
                    "image1",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the SSD (main)",
                        null=True,
                        upload_to="ssd_images/",
                    ),
                ),
                (
                    "image2",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the SSD (optional)",
                        null=True,
                        upload_to="ssd_images/",
                    ),
                ),
                (
                    "image3",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the SSD (optional)",
                        null=True,
                        upload_to="ssd_images/",
                    ),
                ),
                (
                    "image4",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the SSD (optional)",
                        null=True,
                        upload_to="ssd_images/",
                    ),
                ),
                (
                    "image5",
                    models.ImageField(
                        blank=True,
                        help_text="Image of the SSD (optional)",
                        null=True,
                        upload_to="ssd_images/",
                    ),
                ),
                (
                    "storage_capacity",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("120 GB", "120 GB"),
                            ("240 GB", "240 GB"),
                            ("256 GB", "256 GB"),
                            ("480 GB", "480 GB"),
                            ("512 GB", "512 GB"),
                            ("1 TB", "1 TB"),
                            ("2 TB", "2 TB"),
                            ("4 TB", "4 TB"),
                            ("8 TB", "8 TB"),
                        ],
                        help_text="Storage capacity",
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "form_factor",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("2.5-inch", "2.5-inch"),
                            ("M.2", "M.2"),
                            ("PCIe Add-in Card", "PCIe Add-in Card"),
                        ],
                        help_text="Form factor",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "interface",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("SATA III", "SATA III"),
                            ("PCIe 3.0 x4", "PCIe 3.0 x4"),
                            ("PCIe 4.0 x4", "PCIe 4.0 x4"),
                            ("PCIe 4.0 x8", "PCIe 4.0 x8"),
                        ],
                        help_text="Interface",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "read_speed",
                    models.IntegerField(
                        blank=True, help_text="Read speed in MB/s", null=True
                    ),
                ),
                (
                    "write_speed",
                    models.IntegerField(
                        blank=True, help_text="Write speed in MB/s", null=True
                    ),
                ),
            ],
            options={
                "verbose_name": "SSD",
                "verbose_name_plural": "SSDs",
            },
        ),
    ]
