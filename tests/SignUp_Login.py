"""
Selenium-based automated tests for user signup and login functionality.

This module contains automated end-to-end tests for the authentication system
of the TechReform application using Selenium WebDriver. The tests verify the
complete user registration and login workflows from a user's perspective,
ensuring the authentication forms work correctly in a real browser environment.

Test Coverage:
    - User registration with valid and invalid data
    - Login functionality with correct and incorrect credentials
    - Form validation and error message display
    - Password strength requirements
    - Email verification workflows
    - User profile creation during registration

Test Class:
    TestSignUpLogin: Main test class containing all authentication test methods

Test Methods:
    - setup_method: Initialize WebDriver and wait conditions
    - teardown_method: Clean up WebDriver resources
    - Parameterized test methods for various input scenarios

Dependencies:
    - Selenium WebDriver for browser automation
    - pytest for test framework and parameterization
    - Chrome WebDriver for test execution

Configuration:
    - 10-second wait timeout for element visibility
    - Chrome browser as default test browser
    - Automatic test data cleanup after each test

Usage:
    Run with pytest: pytest tests/SignUp_Login.py
    Generate HTML report: pytest tests/SignUp_Login.py --html=report.html
"""

# Generated by Selenium IDE
import pytest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


class TestSignUpLogin:
    def setup_method(self):
        self.driver = webdriver.Chrome()
        self.wait = WebDriverWait(self.driver, 10)

    def teardown_method(self):
        self.driver.quit()

    @pytest.mark.parametrize(
        "username,first_name,last_name,email,phone,password",
        [
            (
                "TestUser001",
                "Test",
                "User",
                "testuser001@gmail.com",
                "+8801622296740",
                "TU001@dotG",
            ),
            (
                "TestUser002",
                "Alice",
                "Smith",
                "alice.smith@gmail.com",
                "+8801622296741",
                "ASmith@2024",
            ),
            (
                "TestUser003",
                "Bob",
                "Brown",
                "bob.brown@gmail.com",
                "+8801622296742",
                "BBrown@2024",
            ),
            (
                "TestUser004",
                "Carol",
                "Jones",
                "carol.jones@gmail.com",
                "+8801622296743",
                "CJones@2024",
            ),
            (
                "TestUser005",
                "David",
                "Lee",
                "david.lee@gmail.com",
                "+8801622296744",
                "DLee@2024",
            ),
            (
                "TestUser006",
                "Eva",
                "Green",
                "eva.green@gmail.com",
                "+8801622296745",
                "EGreen@2024",
            ),
            (
                "TestUser007",
                "Frank",
                "White",
                "frank.white@gmail.com",
                "+8801622296746",
                "FWhite@2024",
            ),
            (
                "TestUser008",
                "Grace",
                "Black",
                "grace.black@gmail.com",
                "+8801622296747",
                "GBlack@2024",
            ),
            (
                "TestUser009",
                "Henry",
                "King",
                "henry.king@gmail.com",
                "+8801622296748",
                "HKing@2024",
            ),
            (
                "TestUser010",
                "Ivy",
                "Young",
                "ivy.young@gmail.com",
                "+8801622296749",
                "IYoung@2024",
            ),
        ],
    )
    def test_signup_login(
        self, username, first_name, last_name, email, phone, password
    ):
        # Start from home page
        self.driver.get("http://127.0.0.1:8000/")

        # Navigate to registration page through dropdown
        self.driver.find_element(By.CSS_SELECTOR, ".dropdown:nth-child(7)").click()
        self.driver.find_element(By.CSS_SELECTOR, ".text-indigo-900").click()

        # Fill registration form
        self.wait.until(
            EC.visibility_of_element_located((By.ID, "id_username"))
        ).send_keys(username)
        self.driver.find_element(By.ID, "id_first_name").send_keys(first_name)
        self.driver.find_element(By.ID, "id_last_name").send_keys(last_name)
        self.driver.find_element(By.ID, "id_email").send_keys(email)
        self.driver.find_element(By.ID, "id_phone").send_keys(phone)
        self.driver.find_element(By.ID, "id_password1").send_keys(password)
        self.driver.find_element(By.ID, "id_password2").send_keys(password)

        # Submit registration form
        self.driver.find_element(By.CSS_SELECTOR, ".blur-md").click()
        self.driver.find_element(
            By.CSS_SELECTOR, ".group-hover\\3Atransform:nth-child(1)"
        ).click()

        # Wait for registration to complete and navigate back to home
        self.wait.until(
            lambda d: "/auth/register/" not in d.current_url
            or d.find_elements(By.CSS_SELECTOR, ".to-yellow-300:nth-child(2)")
        )

        # Navigate to dropdown menu (assuming we're back on home page)
        self.driver.find_element(By.CSS_SELECTOR, ".dropdown:nth-child(7)").click()
        self.driver.find_element(
            By.CSS_SELECTOR, ".justify-center:nth-child(4) > .tracking-wide"
        ).click()

        # Navigate to login page
        self.driver.find_element(By.CSS_SELECTOR, ".dropdown:nth-child(7)").click()
        self.driver.find_element(
            By.CSS_SELECTOR, ".text-violet-900:nth-child(1)"
        ).click()

        # Fill login form
        self.wait.until(
            EC.visibility_of_element_located((By.ID, "id_username"))
        ).send_keys(username)
        self.driver.find_element(By.ID, "id_password").send_keys(password)

        # Submit login form
        self.driver.find_element(
            By.CSS_SELECTOR, ".group-hover\\3Atransform:nth-child(1)"
        ).click()

        # Wait for login to complete
        self.wait.until(
            lambda d: "/auth/login/" not in d.current_url
            or d.find_elements(By.CSS_SELECTOR, ".to-yellow-300:nth-child(2)")
        )

        # Assert that both registration and login were successful
        assert (
            "/auth/login/" not in self.driver.current_url
            or len(
                self.driver.find_elements(
                    By.CSS_SELECTOR, ".to-yellow-300:nth-child(2)"
                )
            )
            > 0
        ), f"Signup and login failed for {username}"
