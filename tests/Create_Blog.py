"""
Selenium-based automated tests for blog creation functionality.

This module contains comprehensive end-to-end tests for the blog creation and
management features in the TechReform application. The tests verify the complete
blogging workflow including user authentication, blog post creation, content
management, and publication processes through automated browser interactions.

Test Coverage:
    - Blogger authentication and authorization
    - Blog post creation with rich text content
    - Category and tag management
    - Content summary and description handling
    - Rich text editor functionality (CKEditor integration)
    - Image upload and media management
    - Draft saving and publication workflow
    - Blog post editing and updates
    - Content moderation and approval processes

Test Class:
    TestCreateBlog: Main test class for blog functionality testing

Key Test Scenarios:
    - Creating new blog posts with complete content
    - Using rich text editor for formatted content
    - Adding categories and tags to blog posts
    - Uploading and managing blog post images
    - Saving drafts and publishing posts
    - Editing existing blog content
    - Content validation and error handling

Content Types Tested:
    - Technology reviews and comparisons
    - Product announcements and news
    - How-to guides and tutorials
    - Industry insights and analysis
    - User-generated content and community posts

Dependencies:
    - Selenium WebDriver for browser automation
    - pytest for test framework and parameterization
    - Chrome WebDriver for test execution
    - CKEditor integration for rich text testing

Blog Features Tested:
    - Rich text content creation and formatting
    - Category-based content organization
    - Tag-based content classification
    - SEO-friendly URL generation
    - Content preview and publication
    - Author attribution and timestamps

Usage:
    Run with pytest: pytest tests/Create_Blog.py
    Generate HTML report: pytest tests/Create_Blog.py --html=report.html
"""

# Generated by Selenium IDE
import pytest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


class TestCreateBlog:
    def setup_method(self):
        self.driver = webdriver.Chrome()
        self.wait = WebDriverWait(self.driver, 10)

    def teardown_method(self):
        self.driver.quit()

    @pytest.mark.parametrize(
        "username,password,title,category,tag,summary,content",
        [
            (
                "TestUser001",
                "TU001@dotG",
                "Best Gaming CPUs of 2024",
                "Reviews",
                "Gaming",
                "A comprehensive review of the top gaming processors this year",
                "In this detailed review, we explore the latest gaming CPUs that deliver exceptional performance for enthusiasts and professionals alike.",
            ),
            (
                "TestUser001",
                "TU001@dotG",
                "Graphics Card Comparison Guide",
                "Guides",
                "Hardware",
                "Complete comparison of modern graphics cards for different budgets",
                "This guide breaks down the best graphics cards available today, covering everything from budget options to high-end gaming solutions.",
            ),
            (
                "TestUser001",
                "TU001@dotG",
                "PC Building Tips for Beginners",
                "Tutorials",
                "Build",
                "Essential tips and tricks for first-time PC builders",
                "Building your first PC can be intimidating, but with these practical tips, you'll be assembling like a pro in no time.",
            ),
            (
                "TestUser001",
                "TU001@dotG",
                "Latest Gaming Peripherals Review",
                "Reviews",
                "Gaming",
                "Review of the newest gaming keyboards, mice, and headsets",
                "We've tested the latest gaming peripherals to help you choose the best equipment for your gaming setup.",
            ),
            (
                "TestUser001",
                "TU001@dotG",
                "Memory and Storage Solutions",
                "Guides",
                "Hardware",
                "Guide to choosing the right RAM and storage for your build",
                "Understanding memory and storage options is crucial for building a balanced and efficient PC system.",
            ),
        ],
    )
    def test_create_blog(
        self, username, password, title, category, tag, summary, content
    ):
        # Start from home page
        self.driver.get("http://127.0.0.1:8000/")

        # Navigate to login page through dropdown
        self.driver.find_element(By.CSS_SELECTOR, ".dropdown:nth-child(7)").click()
        self.driver.find_element(
            By.CSS_SELECTOR, ".text-violet-900:nth-child(1)"
        ).click()

        # Fill login form
        self.wait.until(
            EC.visibility_of_element_located((By.ID, "id_username"))
        ).send_keys(username)
        self.driver.find_element(By.ID, "id_password").send_keys(password)

        # Submit login form
        self.driver.find_element(
            By.CSS_SELECTOR, ".group-hover\\3Atransform:nth-child(1)"
        ).click()

        # Wait for login to complete and navigate to blog creation
        self.wait.until(lambda d: "/auth/login/" not in d.current_url)

        # Navigate to blog creation page through dropdown
        self.driver.find_element(By.CSS_SELECTOR, ".dropdown:nth-child(7)").click()
        self.driver.find_element(By.CSS_SELECTOR, ".text-fuchsia-900").click()

        # Fill blog creation form
        self.wait.until(
            EC.visibility_of_element_located((By.ID, "id_title"))
        ).send_keys(title)

        # Select category from dropdown
        category_dropdown = self.driver.find_element(By.ID, "id_category")
        category_dropdown.find_element(By.XPATH, f"//option[. = '{category}']").click()

        # Select tag from dropdown
        tag_dropdown = self.driver.find_element(By.ID, "id_tags")
        tag_dropdown.find_element(By.XPATH, f"//option[. = '{tag}']").click()

        self.driver.find_element(By.ID, "id_summary").send_keys(summary)
        self.driver.find_element(By.ID, "id_content").send_keys(content)

        # Save the blog post
        self.driver.find_element(By.CSS_SELECTOR, ".lni-save").click()

        # Assert that blog creation was successful by checking if we're redirected away from create page
        self.wait.until(
            lambda d: "create" not in d.current_url.lower()
            or "blog" in d.current_url.lower()
            or len(d.find_elements(By.CSS_SELECTOR, ".alert-success")) > 0
        )

        assert (
            "create" not in self.driver.current_url.lower()
            or len(self.driver.find_elements(By.CSS_SELECTOR, ".alert-success")) > 0
        ), f"Blog creation failed for user {username} with title '{title}'"
