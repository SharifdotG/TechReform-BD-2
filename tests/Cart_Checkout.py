"""
Selenium-based automated tests for shopping cart and checkout functionality.

This module contains comprehensive end-to-end tests for the e-commerce shopping
cart and checkout process in the TechReform application. The tests simulate
real user interactions with the cart system, from adding products to completing
purchases, ensuring the entire e-commerce workflow functions correctly.

Test Coverage:
    - Adding products to cart from various product pages
    - Cart quantity updates and item removal
    - Cart total calculations and discounts
    - Checkout form validation and submission
    - Shipping address management
    - Payment processing integration
    - Order confirmation and history
    - Guest checkout functionality
    - Cart persistence across sessions

Test Class:
    TestCartCheckout: Main test class containing all cart and checkout test methods

Test Scenarios:
    - Valid checkout with complete user information
    - Invalid form submissions with error handling
    - Cart modifications during checkout process
    - Multiple product categories in cart
    - Shipping cost calculations
    - Order summary verification

Dependencies:
    - Selenium WebDriver for browser automation
    - pytest for test framework and parameterization
    - Chrome WebDriver for test execution
    - Test data for various product categories

Browser Automation:
    - Automated form filling and submission
    - Dynamic element waiting and interaction
    - Shopping cart state verification
    - Order completion workflow testing

Usage:
    Run with pytest: pytest tests/Cart_Checkout.py
    Generate HTML report: pytest tests/Cart_Checkout.py --html=report.html
"""

# Generated by Selenium IDE
import pytest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


class TestCartCheckout:
    def setup_method(self):
        self.driver = webdriver.Chrome()
        self.wait = WebDriverWait(self.driver, 10)

    def teardown_method(self):
        self.driver.quit()

    @pytest.mark.parametrize(
        "username,password,phone,address_line1,address_line2,city,state,postal_code",
        [
            (
                "TestUser001",
                "TU001@dotG",
                "8801622296740",
                "123 Main Street",
                "Apt 1A",
                "Dhaka",
                "Dhaka",
                "1000",
            ),
            (
                "TestUser002",
                "ASmith@2024",
                "8801622296741",
                "456 Oak Avenue",
                "Suite 2B",
                "Chittagong",
                "Chittagong",
                "4000",
            ),
            (
                "TestUser003",
                "BBrown@2024",
                "8801622296742",
                "789 Pine Road",
                "Floor 3C",
                "Sylhet",
                "Sylhet",
                "3100",
            ),
            (
                "TestUser004",
                "CJones@2024",
                "8801622296743",
                "321 Elm Street",
                "Unit 4D",
                "Rajshahi",
                "Rajshahi",
                "6000",
            ),
            (
                "TestUser005",
                "DLee@2024",
                "8801622296744",
                "654 Maple Drive",
                "Apt 5E",
                "Khulna",
                "Khulna",
                "9000",
            ),
            (
                "TestUser006",
                "EGreen@2024",
                "8801622296745",
                "987 Cedar Lane",
                "Suite 6F",
                "Barisal",
                "Barisal",
                "8200",
            ),
            (
                "TestUser007",
                "FWhite@2024",
                "8801622296746",
                "147 Birch Court",
                "Floor 7G",
                "Rangpur",
                "Rangpur",
                "5400",
            ),
            (
                "TestUser008",
                "GBlack@2024",
                "8801622296747",
                "258 Walnut Street",
                "Unit 8H",
                "Mymensingh",
                "Mymensingh",
                "2200",
            ),
            (
                "TestUser009",
                "HKing@2024",
                "8801622296748",
                "369 Cherry Avenue",
                "Apt 9I",
                "Comilla",
                "Chittagong",
                "3500",
            ),
            (
                "TestUser010",
                "IYoung@2024",
                "8801622296749",
                "741 Spruce Boulevard",
                "Suite 10J",
                "Gazipur",
                "Dhaka",
                "1700",
            ),
        ],
    )
    def test_cart_checkout(
        self,
        username,
        password,
        phone,
        address_line1,
        address_line2,
        city,
        state,
        postal_code,
    ):
        # Start from home page
        self.driver.get("http://127.0.0.1:8000/")

        # Navigate to login page through dropdown
        self.driver.find_element(By.CSS_SELECTOR, ".dropdown:nth-child(7)").click()
        self.driver.find_element(
            By.CSS_SELECTOR, ".text-violet-900:nth-child(1)"
        ).click()

        # Fill login form
        self.wait.until(
            EC.visibility_of_element_located((By.ID, "id_username"))
        ).send_keys(username)
        self.driver.find_element(By.ID, "id_password").send_keys(password)

        # Submit login form
        self.driver.find_element(
            By.CSS_SELECTOR, ".group-hover\\3Atransform:nth-child(1)"
        ).click()

        # Wait for login to complete and navigate to products
        self.wait.until(lambda d: "/auth/login/" not in d.current_url)

        # Navigate to products page
        self.driver.find_element(
            By.CSS_SELECTOR, ".group-hover\\3A from-blue-700"
        ).click()

        # Add first product to cart
        self.wait.until(
            EC.element_to_be_clickable(
                (
                    By.CSS_SELECTOR,
                    ".bg-white:nth-child(1) .add-to-cart-btn .font-medium",
                )
            )
        ).click()

        # Navigate to cart through dropdown
        self.driver.find_element(By.CSS_SELECTOR, ".dropdown:nth-child(5)").click()
        self.driver.find_element(
            By.CSS_SELECTOR,
            ".btn:nth-child(1) > .relative:nth-child(5) > .tracking-wide",
        ).click()

        # Proceed to checkout
        self.wait.until(
            EC.element_to_be_clickable(
                (By.CSS_SELECTOR, ".group-hover\\3Atext-white:nth-child(4)")
            )
        ).click()

        # Fill checkout form
        self.wait.until(EC.visibility_of_element_located((By.NAME, "phone"))).send_keys(
            phone
        )

        self.driver.find_element(By.NAME, "address_line1").send_keys(address_line1)
        self.driver.find_element(By.NAME, "address_line2").send_keys(address_line2)
        self.driver.find_element(By.NAME, "city").send_keys(city)

        # Select state from dropdown
        dropdown = self.driver.find_element(By.NAME, "state")
        dropdown.find_element(By.XPATH, f"//option[. = '{state}']").click()

        self.driver.find_element(By.NAME, "postal_code").send_keys(postal_code)

        # Select payment method (Cash on Delivery)
        self.driver.find_element(By.CSS_SELECTOR, ".border-primary").click()

        # Accept terms and conditions
        self.driver.find_element(By.CSS_SELECTOR, ".ml-3").click()

        # Place order
        self.driver.find_element(By.CSS_SELECTOR, ".focus\\3Aring-primary\\/30").click()

        # View order details
        self.wait.until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, ".lni-eye"))
        ).click()

        # Assert that checkout was successful by checking if we're on order confirmation/details page
        self.wait.until(
            lambda d: "checkout" not in d.current_url.lower()
            or "order" in d.current_url.lower()
            or len(d.find_elements(By.CSS_SELECTOR, ".lni-eye")) > 0
        )

        assert (
            "checkout" not in self.driver.current_url.lower()
            or "order" in self.driver.current_url.lower()
        ), f"Cart checkout failed for user {username}"
